import random
from itertools import product, combinations
from copy import copy

from wolframclient.evaluation import WolframLanguageSession
from wolframclient.language import wl, wlexpr
session = WolframLanguageSession()

import time


arrays = []

comb_behavior = {}

def pareto_dominates(new_val, old_val):
	failed = False
	reallyGained = False
	for player in range(players):
		if new_val[player] < old_val[player]:
			failed = True
		elif new_val[player] > old_val[player]:
			reallyGained = True

	return reallyGained and not failed

def generate_valuation(base):
	variable_string = "{"
	variables = []
	constraint_string = ""
	constraints = []

	for item in range(items):
		variables.append("x{}".format(item))


	for elem in base:
		con_string = ""
		for item in range(items):
			if elem[item] == 1:
				con_string += "+ x{}".format(item)
			elif elem[item] == -1:
				con_string += "- x{}".format(item)
		constraints.append(con_string + " < 0")

	opt_goal = "5"

	constraint_string = "{" + ",".join(constraints) + "}"

	variable_string += ",".join(variables) + "}"

	lp_string = "Quiet[Maximize[" + opt_goal + ", " + constraint_string + "," + variable_string + "]]"

	try:
		is_feasible = session.evaluate(wlexpr(lp_string))

		valuation = []

		for item in range(items):
			if type(is_feasible[1][item][1]) == int:
				valuation.append(is_feasible[1][item][1])
			else:
				try:
					valuation.append(is_feasible[1][item][1][0] / is_feasible[1][item][1][1])
				except Exception as e:
					for i in range(1000):
						print("UNFEASIBLE CONSTRAINTS!!!!")
						return None
	except Exception as e:
		print("EXCEPTION IN GENERATE VALUATION")
		import pdb
		pdb.set_trace()

	return valuation


def reverse_comb(comb):
	new_comb = []
	for i in comb:
		new_comb.append(-i)

	return new_comb

def is_comb_in_base(comb, base):
	variable_string = "{"
	variables = []
	constraint_string = ""
	constraints = []
	item_constraints = ["" for j in range(len(comb))]
	for i in range(len(base)):
		variables.append("x{}".format(i))
		constraints.append("x{} >= 0".format(i))
		for j in range(len(comb)):
			if base[i][j] == 1:
				item_constraints[j] += "+ x{}".format(i)
			elif base[i][j] == -1:
				item_constraints[j] += " - x{}".format(i)


	opt_goal = item_constraints[0]
	for j in range(len(comb)):
		item_constraints[j] += " == {}".format(comb[j])

	all_constraints = item_constraints + constraints

	constraint_string = "{" + ",".join(all_constraints) + "}"

	variable_string += ",".join(variables) + "}"

	lp_string = "Quiet[Maximize[" + opt_goal + ", " + constraint_string + "," + variable_string + "]]"

	is_feasible = session.evaluate(wlexpr(lp_string))


	return type(is_feasible[0]) == int


#is_comb_in_base([0,0,1,-1,1,0],[[-1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0], [0, 0, 0, -1, 0, 0], [0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, -1], [1, -1, -1, 0, 0, 1], (1, -1, 1, -1, 0, 0), (-1, 1, 0, -1, 0, 1), [1, 0, -1, -1, 1, 1], [1, -1, -1, 1, 0, -1], [0, 0, -1, 0, 0, 1], [1, 1, -1, -1, -1, 1], [1, 0, -1, 0, 1, 0], [0, -1, -1, 1, 1, 0], (0, -1, -1, -1, -1, 1), (1, 1, -1, 0, 0, 0), (-1, 0, 0, -1, 1, 1), (-1, 1, -1, 1, 0, -1), (-1, 0, -1, 0, 0, 0), (-1, 1, 0, 0, 0, -1), (1, 1, 1, -1, -1, -1), (0, 0, 0, 0, -1, 1), (-1, 1, 0, -1, 0, 0), [0, 0, 1, -1, 1, 0], [0, 1, 1, -1, 0, -1], [0, -1, -1, 0, 0, -1], (-1, 1, 1, 1, 1, 0), [0, 1, 0, 0, 0, -1], [1, 0, -1, 1, 0, 0], [-1, 0, -1, 1, 1, 0], (0, 1, 1, -1, 0, 0), (0, 0, 1, -1, 0, -1), [1, -1, 1, 0, -1, 0], [1, -1, 0, 0, 1, 1], [0, 0, -1, 1, 1, 0], [0, 0, 1, 1, 1, 1], (0, -1, 0, -1, 0, 1), (-1, -1, -1, 1, 1, -1), [0, -1, -1, 1, -1, -1], [1, 0, 0, -1, -1, 0], (0, -1, 0, -1, 1, 0), [0, -1, -1, 0, -1, 1], [1, -1, 1, 1, 0, -1], [-1, 1, 0, 0, -1, 1], (1, 1, 0, -1, -1, 0), (-1, -1, -1, 0, 0, 1), [-1, 0, 0, 0, -1, -1], [-1, 1, 1, -1, 1, 1], [1, 0, -1, 0, 0, 0], [0, -1, -1, 0, -1, 0], (0, 0, 1, 0, 1, -1), (1, -1, 1, 0, 1, -1), (1, 1, 1, 1, 1, -1), [-1, 1, 1, 1, 0, -1], (-1, -1, -1, 1, 1, 0), (-1, -1, 0, 1, -1, -1), (1, 1, -1, 1, 0, -1), (-1, 0, 0, 1, 0, 1), [1, -1, -1, 1, 0, 0], [0, 1, -1, 0, 0, -1], [1, 1, 1, -1, 0, 0], (-1, -1, 1, 0, 0, 0), (1, 0, -1, 0, 1, -1), (0, -1, 1, 1, -1, -1), (0, -1, 0, -1, -1, 1), [1, 0, 1, -1, 1, 1], [-1, 1, 0, 1, 0, -1], [1, 1, 1, 0, -1, 1], (-1, 1, 0, -1, 0, -1), [-1, 0, 1, -1, 1, 0], [0, -1, 0, -1, -1, 1], (1, 0, 0, 1, 1, -1), [-1, -1, 1, -1, -1, -1], (1, 1, -1, 0, 0, -1), [0, 0, 1, 0, 0, 1], (-1, -1, 1, -1, 1, 0), [0, -1, 0, -1, 1, 0], (-1, 1, 0, 0, -1, 0), (1, -1, 1, 1, 1, -1), [0, 0, 0, -1, 0, 0], (0, 1, 0, 0, 0, -1), (-1, 1, -1, 1, -1, 1), (1, 1, 1, -1, 1, -1), [0, 0, 0, -1, -1, 0], (-1, 1, -1, -1, -1, 1), [0, -1, -1, 0, 1, 1], [1, 0, 0, 1, 0, 1], [1, 1, -1, -1, -1, 0], [1, -1, -1, 1, 1, 0], [-1, -1, -1, 1, 0, 0], (-1, 1, -1, 1, -1, -1), (0, 0, 0, 1, 1, -1), [-1, -1, 1, 0, -1, 0], [0, 0, 0, -1, 1, 0], [1, -1, 1, 0, 0, 1], (1, 0, 0, 1, 1, 1), (0, -1, 0, 0, -1, 0), [-1, 1, 1, -1, 1, 0], [-1, 0, -1, 0, 1, -1], (-1, 0, 0, -1, -1, 0), (0, 1, 0, 1, 0, 1), [-1, 1, 1, 0, 1, 0], (1, -1, 1, -1, 1, 1), [-1, 1, 1, 0, 1, 1], (1, 1, 0, -1, -1, -1), [-1, -1, 0, 1, 1, -1], (1, 1, -1, -1, 0, 1), (1, 0, 1, -1, 1, 1), (1, 0, -1, -1, -1, -1), (-1, 1, 1, 1, 0, 1), (1, 1, -1, 0, 0, 1), (-1, 0, -1, -1, 0, 1), [0, -1, 1, 1, 0, 1], (0, 1, 1, 1, -1, -1), [-1, -1, -1, -1, 1, 0], [-1, 1, 1, 1, -1, -1], [-1, -1, 1, -1, 1, 0], (1, 0, -1, 1, -1, -1), [0, -1, 0, 0, 1, 1], [0, 0, 1, 0, 1, -1], [-1, -1, -1, 1, -1, 0], [1, -1, 0, 1, -1, 0], [0, -1, -1, 1, -1, 1], [-1, -1, -1, 0, 1, 0], [1, 0, -1, -1, 0, 0], [-1, 1, -1, 0, 0, 0], (0, 0, 1, -1, 1, 1), (0, -1, -1, 0, 0, 0), [-1, 1, -1, -1, -1, 0], [0, 1, 0, 1, 0, 0], [-1, 1, 1, -1, 1, -1], (1, 1, 1, 1, -1, 1), [1, 1, -1, -1, 0, -1], [-1, -1, 0, -1, -1, 1], [-1, 0, -1, 0, -1, 0], [1, 0, 1, -1, 0, 0], [1, -1, 1, 1, 1, 1], [-1, 1, -1, 0, 0, -1], [0, -1, 1, 0, 1, -1], [-1, 0, -1, 1, -1, 0], (0, -1, 0, -1, 1, 1), [-1, 0, 0, -1, -1, 0], [-1, -1, 0, -1, 0, -1], [0, 1, 1, 0, 1, 1], [-1, 0, 1, -1, 1, -1], [-1, 0, 0, 0, 0, -1], (-1, 1, 1, -1, 1, 1), (0, -1, 0, 0, 1, 0), (-1, 0, 1, 0, -1, -1), [1, 1, 1, 1, 1, 1], [-1, 0, 0, 1, -1, 1], (0, -1, -1, -1, 0, -1), [-1, 0, 1, -1, 0, -1], [-1, 1, 1, 0, 0, 0], [1, -1, 0, 1, -1, 1], [0, 0, 1, 0, -1, 0], (1, 1, 0, 1, -1, 0), (0, 1, 0, -1, -1, 1), [1, 1, 1, 0, 1, 1], (-1, 1, 1, 1, 0, -1), (-1, -1, -1, -1, 1, 0), [0, 1, -1, -1, 1, 0], (1, 1, 0, -1, 0, -1), (0, 1, -1, 1, -1, -1), [1, 1, 1, 0, 1, 0], (-1, -1, 0, 0, 1, 1), (1, 1, -1, -1, -1, 0), [0, -1, 1, 1, -1, -1], (1, 1, 0, 1, 0, -1), [1, 0, 1, -1, 0, 1], [1, -1, -1, 0, 1, 1], [1, 1, 0, -1, 0, 0], (1, -1, 0, 0, -1, 0), (0, 0, 1, 1, -1, 0), (-1, 0, 1, 0, 0, 1), (1, -1, -1, 1, 0, -1), (1, -1, -1, 1, 1, 0), [0, -1, 1, 0, 1, 0], (0, -1, 1, 1, 0, 1), [0, 1, 0, 0, 0, 0], (-1, 1, -1, 1, -1, 0), (-1, 0, 1, -1, 0, -1), [1, 1, 0, 0, 0, 1], [1, 1, -1, 1, 1, 0], (-1, -1, 1, 0, 0, 1), (0, 1, 1, 0, 0, -1), (1, 1, 0, 0, 1, 0), (1, 0, 0, 0, 1, 0), [-1, -1, 1, -1, 1, 1], (0, 1, -1, -1, 0, 1), (-1, 0, 1, 1, 1, -1), [1, 1, -1, 1, 1, -1], [-1, 0, -1, -1, 1, 0], [0, 1, 1, -1, 0, 0], (1, 0, -1, 1, 0, -1), (1, -1, 0, 0, -1, 1), (-1, -1, 1, -1, 0, -1), (-1, 1, 1, -1, -1, -1), (0, 0, -1, -1, 0, -1), (1, 1, -1, 0, -1, -1), [0, -1, 0, 1, 0, 1], (-1, 1, 0, -1, -1, 0), (0, 1, 1, 1, 1, 1), (1, 1, 1, 0, 1, 1), (1, -1, -1, 0, 1, -1), [0, 0, 1, 0, 0, -1], (0, -1, -1, 0, 0, -1), [0, -1, -1, -1, -1, 0], [1, 1, -1, -1, 0, 1], (-1, -1, -1, -1, 0, 1), (-1, -1, 1, -1, 1, -1), [1, 0, 0, -1, 0, 1], [1, 0, 0, 1, 1, 1], [1, -1, -1, -1, 0, 0], [-1, 0, -1, 0, 0, 1], [-1, 0, 1, 1, -1, 0], [-1, 0, 1, 0, 1, -1], [0, 1, -1, 1, -1, -1], [-1, -1, 0, 0, 1, 1], [1, -1, 1, -1, -1, -1], [-1, -1, 1, 0, 1, -1], [-1, 0, -1, 0, 0, -1], [0, -1, 1, 1, 0, 0], [1, 1, 0, -1, -1, -1], (1, 0, -1, 0, 0, 0), [-1, 0, 1, 0, 1, 0], [0, 1, 1, 0, -1, -1], (1, 1, 0, 0, 0, 1), [-1, -1, -1, 0, 0, 0], (-1, -1, 0, -1, 0, 0), [0, -1, 0, -1, 0, 0], (-1, -1, 1, 0, -1, 0), [-1, 1, 0, -1, 0, 1], (1, -1, 1, 0, -1, 0), [1, 1, -1, 0, 0, 1], (1, 0, 1, 0, 1, -1), [1, 0, 0, 0, -1, 0], [-1, 0, 0, 0, 1, 1], [1, 1, 0, -1, 0, -1], (-1, 0, 0, -1, 1, 0), (-1, -1, 1, 0, 1, 1), (0, -1, 1, -1, 0, -1), (1, -1, 0, -1, 1, 1), [0, 0, -1, -1, 1, -1], (-1, -1, 0, -1, 0, -1), (-1, 1, 1, 0, -1, 0), (-1, 0, -1, 0, 1, 1), [-1, -1, -1, 0, -1, 0], (0, 1, 1, -1, 0, -1), (-1, 0, 0, 0, 0, -1), (0, -1, -1, -1, 1, 1), [-1, 0, 1, 0, -1, -1], (-1, -1, 0, -1, 1, -1), [0, 1, -1, 1, -1, 0], (-1, -1, -1, 0, 0, 0), [0, 0, 1, -1, -1, 0], [0, 0, 1, 0, 0, 0], [0, 0, -1, 0, 1, 1], [0, -1, 0, 0, -1, 1], [0, -1, -1, -1, -1, 1], [1, 0, -1, 0, -1, 1], [0, -1, -1, 1, 1, -1], [0, 1, 0, 1, 1, 1], [0, 1, 0, -1, 1, -1], [1, 0, 1, -1, -1, 1], (1, 0, -1, 1, 1, 1), [0, -1, 1, 0, -1, -1], (1, 0, -1, 1, 1, 0), (1, 0, 1, -1, 0, -1), (1, -1, 1, 0, 1, 0), [0, 0, 0, -1, 0, -1], (0, -1, 0, 0, 0, -1), (0, 1, 1, -1, -1, -1), (1, 0, 1, 0, -1, -1), (1, 0, 0, 0, 1, -1), (-1, -1, -1, 1, -1, -1), [-1, 1, -1, 1, 0, -1], (-1, -1, 0, -1, 0, 1), [0, -1, 1, -1, -1, 0], (-1, 1, 0, 0, 1, 0), (1, -1, -1, -1, -1, 1), (0, 1, -1, 0, 1, -1), [1, -1, 0, 1, -1, -1], [0, -1, -1, -1, 1, 0], [-1, 1, 0, 0, 0, 0], [0, 1, 0, 0, -1, -1], [0, 1, 0, 1, 1, 0], [0, 0, -1, 0, -1, 0], [-1, 1, 1, 0, -1, 0], [1, 0, 1, 1, -1, 1], (-1, -1, 1, 0, 1, 0), (0, -1, 1, 1, 0, -1), [-1, -1, 1, 1, 1, 1], [1, -1, -1, 0, -1, 1], [-1, -1, 0, 0, 1, 0], (1, 0, 1, 0, 1, 1), (1, 0, -1, -1, -1, 0), [0, 1, 0, 1, -1, 1]])

def is_pareto_dominable(alloc, true_combs_base, all_combs):
	players = len(true_combs_base)
	items = len(alloc)

	all_zeros = [0 for j in range(items)]


	for comb in  all_combs:
		eq_by_player = [copy(all_zeros) for i in range(players)]

		for i in range(items):
			if alloc[i] != comb[i]:
				eq_by_player[alloc[i]][i] = 1
				eq_by_player[comb[i]][i] = -1

		isPD = True
		isSPD = False
		for player in range(players):
			if sum(eq_by_player[player]) == 0 and len(set(eq_by_player[player])) == 1:
				isPD = False
				break
			elif is_comb_in_base(eq_by_player[player], true_combs_base[player]):
				isSPD = True
				continue
			anti_comb = reverse_comb(eq_by_player[player])
			if is_comb_in_base(anti_comb, true_combs_base[player]):
				isPD = False
				break
			else:
				isSPD = True

		if isPD and isSPD:
			return True, eq_by_player

	return False, None

def is_pareto_dominated(alloc, true_combs_base, all_combs, good_combs):
	players = len(true_combs_base)
	items = len(alloc)

	all_zeros = [0 for j in range(items)]
	all_combs_copy = copy(all_combs)

	random.shuffle(all_combs_copy)

	running_ind = 0
	how_many = 0

	bad_combs = {0: set([]), 1: set([]), 2:set([])}



	for comb in  all_combs_copy:
		running_ind += 1
		eq_by_player = [copy(all_zeros) for i in range(players)]

		for i in range(items):
			if alloc[i] != comb[i]:
				eq_by_player[alloc[i]][i] = 1
				eq_by_player[comb[i]][i] = -1

		isPD = True
		isSPD = False
		more_thorough = []
		for player in range(players):
			if sum(eq_by_player[player]) == 0 and len(set(eq_by_player[player])) == 1:
				continue
			elif 1 not in eq_by_player[player]:
				isSPD = True
				continue
			elif -1 not in eq_by_player[player]:
				isPD = False
			else:
				more_thorough.append(player)
		
		if isPD:
			for player in more_thorough:
				how_many += 1
				if tuple(eq_by_player[player]) in good_combs[player]:
					isSPD = True
					continue

				elif tuple(eq_by_player[player]) in bad_combs[player]:
					isPD = False
					break

				if is_comb_in_base(eq_by_player[player], true_combs_base[player]):
					isSPD = True
					good_combs[player].add(tuple(eq_by_player[player]))
					continue
				else:
					isPD = False
					bad_combs[player].add(tuple(eq_by_player[player]))
					break

		if isPD and isSPD:
			#print("FOUND PD IN RUN INDEX {}".format(running_ind))
			print("HOW MANY: {}".format(how_many))
			return True

	#print("NOT PD")
	print("HOW MANY: {}".format(how_many))

	return False

def filter_pareto_dominated(allocs, true_combs_base, all_combs, good_combs, bad_combs):
	filtered_allocs = []
	players = len(true_combs_base)
	items = len(allocs[0])

	all_zeros = [0 for j in range(items)]
	all_combs_copy = copy(all_combs)

	random.shuffle(all_combs_copy)

	running_ind = 0
	how_many = 0


	bad_combs = {0: set([]), 1: set([]), 2:set([])}

	for alloc in allocs:
		foundPD = False
		for comb in  all_combs_copy:
			running_ind += 1
			eq_by_player = [copy(all_zeros) for i in range(players)]

			for i in range(items):
				if alloc[i] != comb[i]:
					eq_by_player[alloc[i]][i] = 1
					eq_by_player[comb[i]][i] = -1

			isPD = True
			isSPD = False
			more_thorough = []
			for player in range(players):
				if sum(eq_by_player[player]) == 0 and len(set(eq_by_player[player])) == 1:
					continue
				elif 1 not in eq_by_player[player]:
					isSPD = True
					continue
				elif -1 not in eq_by_player[player]:
					isPD = False
					break
				else:
					more_thorough.append(player)
			
			if isPD: 
				for player in more_thorough:
					how_many += 1
					if tuple(eq_by_player[player]) in good_combs[player]:
						isSPD = True
						continue

					elif tuple(eq_by_player[player]) in bad_combs[player]:
						isPD = False
						break

					if is_comb_in_base(eq_by_player[player], true_combs_base[player]):
						isSPD = True
						good_combs[player].add(tuple(eq_by_player[player]))
						continue
					else:
						isPD = False
						bad_combs[player].add(tuple(eq_by_player[player]))
						break

			if isPD and isSPD:
				#print("FOUND PD IN RUN INDEX {}".format(running_ind))
				#print("HOW MANY: {}, FILTERED LENGTH: {}".format(how_many, len(filtered_allocs)))
				#print("alloc {} is pareto dominated by comb {}, removing".format(alloc, comb))
				foundPD = True
				break

		#print("NOT PD")
		if not foundPD:
			filtered_allocs.append(alloc)
		#print("HOW MANY: {}, FILTERED LENGTH: {}".format(how_many, len(filtered_allocs)))

	return filtered_allocs

def filter_efx_envious(allocs, true_combs_base, all_combs, good_combs, bad_combs):
	filtered_allocs = []
	for alloc in allocs:
		all_poss_j = []
		for pair in all_pairs:
			side1_items = []
			side2_items = []
			equ = copy(all_zeros)
			for i in range(len(alloc)):
				if alloc[i] == pair[0]:
					side1_items.append(i)
					equ[i] = 1
				elif alloc[i] == pair[1]:
					side2_items.append(i)
					equ[i] = -1

			for j in side2_items:
				curr_equ = copy(equ)
				curr_equ[j] = 0
				if sum(curr_equ) == 0 and len(set(curr_equ)) == 1:
					continue
				all_poss_j.append(tuple([pair[0], curr_equ]))

		random.shuffle(all_poss_j)
		isAlreadyJealous = False
		count_ops = 0
		for elem in all_poss_j:
			#anti_comb = reverse_comb(elem[1])
			if tuple(elem[1]) in good_combs[elem[0]]: 
				#print("alloc {} has eq {} for player {}, and thus envious".format(alloc, elem[1], elem[0]))
				isAlreadyJealous = True
				break
			elif tuple(elem[1]) in bad_combs[elem[0]]:
				continue
			elif is_comb_in_base(tuple(elem[1]), true_combs_base[elem[0]]):
				count_ops += 1
				good_combs[elem[0]].add(tuple(elem[1]))
				#print("alloc {} has eq {} for player {}, and thus envious".format(alloc, elem[1], elem[0]))
				isAlreadyJealous = True
				break
			else:
				bad_combs[elem[0]].add(tuple(elem[1]))
				continue
		if isAlreadyJealous == False:
			#print("alloc {} has no current envy, performed {} ops".format(alloc, count_ops))
			filtered_allocs.append(alloc)

	return filtered_allocs

def autocorr(f_votes, tcb, player):
	count_bad = 0
	for f_vote in f_votes:
		try:
			if f_vote[0] == player:
				anti_fvote = tuple(reverse_comb(f_vote[1]))
				if is_comb_in_base(anti_fvote, tcb):
					count_bad += 1
		except Exception as e:
			print("WAT")
			import pdb
			pdb.set_trace()

	return count_bad


def split_mandatory(all_combs):
	mandatory_combs = []
	later_combs = []
	latest_combs = []

	for comb in all_combs:
		counts = [0,0,0]
		counts[0] = len([i for i in filter(lambda x: x==0, comb)])
		counts[1] = len([i for i in filter(lambda x: x==1, comb)])
		counts[2] = len([i for i in filter(lambda x: x==2, comb)])

		counts.sort()
		if counts[:2] == [1,1]:
			mandatory_combs.append(comb)
		elif 1 in counts:
			later_combs.append(comb)
		elif 0 not in counts:
			latest_combs.append(comb)

	return mandatory_combs, later_combs, latest_combs



players = 3

all_pairs = []

for comb in combinations([i for i in range(players)], 2):
	pair_list = [i for i in comb]
	pair_list_r = copy(pair_list)
	pair_list_r.reverse()
	all_pairs.append(pair_list)
	all_pairs.append(pair_list_r)

for items in range(6,13):

	all_combs = [item for item in product([i for i in range(players)], repeat=items)]

	mandatory_combs, later_combs, latest_combs = split_mandatory(all_combs)

	max_stop = 0
	max_conf = {}

	for random_try in range(1000):

		print("RANDOM TRY: {}".format(random_try))
		init_true_combs_base = {0: [[-1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0], [0, 0, 0, -1, 0, 0], [0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, -1], [-1, 1, -1, 0, 0, -1], [-1, -1, 0, 0, 1, -1], [0, 0, 1, -1, -1, -1], [0, 1, -1, -1, -1, 0], [1, 0, 0, -1, -1, -1], [1, -1, -1, 0, 0, -1], [-1, -1, 1, -1, 0, 0], [-1, 0, -1, -1, 1, 0], [0, -1, -1, 1, 0, -1], [0, -1, 1, 0, -1, -1], [-1, -1, -1, 1, 0, 0], [-1, 0, 0, -1, -1, 1], [-1, -1, 0, -1, 0, 1], (0, 0, 0, -1, -1, 1), (0, -1, 0, 0, 1, -1), (0, 0, -1, 0, -1, 1), (0, -1, -1, 1, 0, 0), (-1, 0, -1, 0, 0, 1), (0, -1, 0, 1, 0, -1), (0, 0, 1, 0, -1, -1), (1, 0, 0, -1, 0, -1), (0, -1, 0, 0, -1, 1), (0, -1, 0, -1, 0, 1), (1, -1, 0, -1, 0, 0), (1, 0, -1, 0, -1, 0), (0, -1, 0, 1, -1, 0), (-1, 0, 0, -1, 1, 0), (1, -1, 0, 0, -1, 1), (0, -1, 1, 0, -1, 0), (0, 0, 0, 1, -1, -1), (0, 0, -1, 1, -1, 1), (0, 0, -1, -1, 1, 0), (0, 0, 1, -1, 0, -1), (0, -1, 1, 1, -1, 0), (0, -1, -1, 0, 1, 1), (0, 1, -1, 0, 0, -1), (-1, 0, 0, 1, 0, -1), (-1, 1, 0, 0, 0, -1), (-1, 1, -1, 0, 0, 0), (0, 0, 1, -1, -1, 0), (0, 1, -1, -1, 0, 0), (-1, 0, 1, 0, 0, 1), (-1, 1, 0, -1, 1, 0)], 1: [[-1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0], [0, 0, 0, -1, 0, 0], [0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, -1], [-1, 1, 0, -1, 0, -1], [-1, 1, 0, -1, -1, 0], [-1, 0, 1, -1, 0, -1], [1, -1, -1, -1, 0, 0], [-1, 0, 1, 0, -1, -1], [-1, -1, 0, 1, -1, 0], [-1, -1, 0, -1, 1, 0], [0, -1, -1, 1, 0, -1], [0, 0, -1, -1, -1, 1], [1, -1, 0, -1, -1, 0], [0, -1, -1, 0, 1, -1], [1, -1, 0, 0, -1, -1], [-1, 1, -1, 0, -1, 0], [-1, 0, -1, -1, 0, 1], (0, 0, -1, 0, -1, 1), (-1, 1, 0, 0, 1, 0), (-1, 0, 1, 0, 0, -1), (-1, 0, 0, 0, -1, 1), (-1, -1, 0, 1, 0, 0), (-1, 0, 0, 0, 1, 1), (-1, 0, -1, 1, 0, 0), (0, 0, 1, -1, 0, -1), (-1, -1, 0, 1, 1, 0), (-1, 0, 0, 1, 0, 0), (-1, 1, 1, 0, 0, -1), (-1, 1, 0, 1, 0, -1), (-1, 0, 0, 1, 1, 0), (-1, 0, 1, 0, -1, 0), (-1, 0, 1, 0, 0, 0), (-1, 1, 0, 1, 0, 0), (-1, 0, 1, 1, 0, 0), (-1, 0, 0, 1, 0, 1), (-1, 1, 1, 0, 0, 0), (-1, 1, 0, 0, 0, 1), (0, -1, 0, 1, 1, -1), (-1, 0, 1, 0, 1, 0), (1, 0, -1, 0, 0, -1)], 2: [[-1, 0, 0, 0, 0, 0], [0, -1, 0, 0, 0, 0], [0, 0, -1, 0, 0, 0], [0, 0, 0, -1, 0, 0], [0, 0, 0, 0, -1, 0], [0, 0, 0, 0, 0, -1], [-1, 1, 0, -1, 0, -1], [0, 1, -1, -1, -1, 0], [0, 1, -1, 0, -1, -1], [1, 0, -1, -1, 0, -1], [1, 0, -1, -1, -1, 0], [0, -1, 0, -1, -1, 1], [-1, 0, -1, 0, -1, 1], [1, -1, -1, 0, -1, 0], [0, 0, 1, -1, -1, -1], [0, -1, -1, 1, -1, 0], [-1, 0, 1, 0, -1, -1], [-1, 0, 1, -1, -1, 0], [1, 0, 0, -1, -1, -1], (0, 1, -1, 0, -1, 0), (0, 0, -1, -1, 0, 1), (0, -1, 0, -1, 1, 0), (0, 1, 0, 0, -1, -1), (-1, 0, -1, 0, 0, 1), (0, -1, -1, 0, 1, 0), (1, 0, -1, 0, -1, 0), (0, 0, -1, 0, 1, -1), (0, 1, -1, -1, 1, 0), (0, 0, -1, -1, 1, 1), (1, 0, 0, -1, -1, 0), (0, 1, -1, 1, 0, -1), (1, 0, -1, -1, 1, 0), (-1, 0, 0, 0, 1, -1), (1, 1, -1, 0, -1, 0), (0, -1, 0, -1, 0, 1), (0, 0, -1, 0, -1, 1), (1, 0, -1, 0, 0, -1), (0, 1, 0, -1, -1, 0), (-1, 0, 0, 1, -1, 0), (0, 1, -1, 0, 0, 0), (0, -1, 1, -1, 0, 0), (0, -1, 0, 1, 0, -1), (0, 1, -1, -1, 0, 1), (1, 0, 0, -1, 0, -1), (0, 0, -1, 1, -1, 1), (0, 0, 1, -1, -1, 0), (0, 0, 1, 0, -1, -1)]}

		allocs = [(1, 0, 2, 1, 0, 1), (0, 1, 1, 2, 2, 1), (1, 0, 0, 2, 2, 2), (1, 2, 2, 1, 0, 0), (1, 0, 2, 1, 2, 0), (0, 0, 1, 2, 2, 1), (1, 0, 2, 0, 1, 2), (2, 0, 1, 2, 0, 1), (0, 2, 1, 2, 0, 1), (1, 0, 2, 0, 0, 2), (1, 2, 0, 2, 0, 2), (1, 2, 1, 2, 0, 0), (1, 1, 2, 0, 0, 2), (1, 0, 2, 2, 0, 1), (1, 0, 0, 2, 2, 1), (1, 1, 2, 0, 0, 1), (0, 2, 1, 0, 2, 1), (1, 0, 1, 2, 0, 2), (1, 2, 0, 2, 0, 1), (1, 0, 2, 0, 2, 1), (1, 0, 1, 2, 2, 0), (1, 0, 1, 0, 2, 2), (1, 2, 1, 0, 2, 0), (1, 2, 2, 0, 0, 0), (1, 2, 1, 0, 0, 2), (1, 0, 2, 0, 2, 0), (1, 2, 2, 0, 0, 1), (1, 0, 2, 1, 0, 2), (2, 0, 1, 0, 2, 1), (1, 0, 2, 2, 0, 0), (1, 0, 2, 2, 2, 0), (2, 2, 1, 0, 0, 1), (1, 1, 0, 2, 0, 2)]

		init_good_combs = {0: {(0, -1, 0, 1, 0, -1), (0, -1, 0, 1, -1, 0), (-1, -1, 1, 0, 1, -1), (-1, -1, 0, 1, -1, -1), (-1, -1, 0, 1, 0, 0), (-1, 0, 1, 0, -1, -1), (-1, 0, 1, -1, 0, -1), (-1, 0, 1, -1, -1, 0), (-1, 0, 1, 0, 0, 0), (0, 0, 1, -1, -1, 1), (-1, -1, -1, 0, -1, 1), (-1, 0, -1, 0, 0, 1), (-1, 1, -1, -1, 1, -1), (-1, 0, 0, -1, -1, 1), (0, -1, -1, -1, 0, 1), (-1, -1, -1, -1, 0, 0), (1, -1, 1, 0, -1, -1), (-1, 0, 0, 0, 0, 0), (-1, -1, -1, 1, 1, -1), (-1, 0, 0, 0, 1, -1), (0, 0, 1, 0, -1, -1), (0, 0, 1, -1, 0, -1), (0, 0, 1, -1, -1, 0), (-1, -1, -1, -1, 1, -1), (-1, 0, 0, -1, 1, 1), (-1, -1, -1, -1, 0, 1), (0, 0, 0, -1, -1, 1), (-1, -1, -1, 0, 1, 1), (-1, 0, 0, 0, 0, 1), (0, -1, -1, -1, 1, -1), (-1, 0, 0, -1, 1, 0), (-1, 0, -1, 0, 1, -1), (-1, -1, -1, 0, 1, 0), (0, -1, -1, 0, 1, 1), (-1, 0, -1, -1, 1, 1), (-1, 1, 1, -1, 0, -1), (0, 0, 0, 0, -1, 0), (0, 1, -1, -1, -1, 1), (0, -1, -1, 0, 1, 0), (-1, 0, -1, -1, 1, 0), (1, -1, -1, 0, -1, 0), (1, -1, 0, 0, -1, -1), (0, 0, -1, 1, -1, -1), (0, -1, -1, 1, -1, 1), (0, 0, 0, 0, -1, 1), (1, -1, -1, -1, 1, -1), (-1, 1, 1, -1, -1, -1), (-1, -1, 1, 0, -1, 1), (-1, -1, 1, -1, 0, 1), (-1, 1, 1, 0, -1, -1), (0, 1, -1, -1, -1, 0), (0, 1, -1, -1, 0, -1), (0, 1, -1, 0, -1, -1), (0, 0, 0, -1, 0, 0), (0, 1, 0, -1, -1, -1), (-1, 1, -1, -1, -1, 1), (-1, 1, 0, 0, -1, 1), (-1, 1, 0, -1, 0, 1), (0, -1, 0, -1, -1, -1), (0, 0, -1, -1, 1, 0), (-1, -1, 0, 0, -1, -1), (-1, 0, -1, 1, -1, -1), (-1, 0, -1, 1, 0, 0), (-1, -1, 1, -1, 0, 0), (0, -1, -1, 1, 0, -1), (-1, -1, 1, -1, -1, -1), (0, -1, -1, 1, -1, 0), (-1, -1, 1, 0, -1, 0), (-1, -1, -1, 1, -1, 1), (-1, -1, 1, 0, 0, -1), (-1, 1, -1, 1, -1, 0), (-1, 0, 1, 1, -1, -1), (-1, 0, 0, 0, -1, 1), (0, -1, 1, 0, -1, 1), (0, -1, 1, -1, 0, 1), (-1, -1, -1, -1, -1, 1), (-1, 1, -1, -1, 0, -1), (-1, 1, -1, 0, -1, -1), (-1, 1, -1, -1, -1, 0), (-1, 1, 0, 0, 0, -1), (-1, 1, 0, -1, -1, -1), (-1, 1, -1, 0, 0, 0), (-1, 1, 0, -1, 0, 0), (-1, 1, 0, 0, -1, 0), (-1, 1, -1, 1, -1, 1), (0, -1, 1, -1, -1, -1), (-1, -1, -1, 1, 0, -1), (-1, -1, -1, 1, -1, 0), (0, -1, 1, 0, -1, 0), (0, -1, 1, 0, 0, -1), (0, -1, 1, -1, 0, 0), (-1, 0, 0, 1, -1, -1), (0, -1, 1, -1, 1, -1), (0, -1, -1, -1, -1, 1), (-1, 0, 0, -1, 0, 1), (-1, 0, -1, 0, -1, 1), (-1, -1, -1, 0, 0, 1), (1, -1, -1, 0, -1, 1), (1, -1, 0, -1, -1, 1), (1, -1, -1, -1, 0, 1), (-1, -1, 1, -1, 1, -1), (-1, -1, 0, 0, 1, -1), (0, 0, 0, 1, -1, -1), (0, -1, 0, -1, 1, -1), (1, -1, 1, -1, -1, 0), (0, 0, -1, 0, -1, 1), (-1, -1, 0, -1, 1, 1), (0, -1, -1, 0, 0, 1), (1, -1, 1, -1, -1, -1), (-1, 0, -1, -1, 0, 1), (1, -1, -1, 0, 0, -1), (1, 0, 0, -1, -1, -1), (1, -1, -1, -1, -1, -1), (1, 0, -1, -1, 0, -1), (1, -1, 0, -1, 0, -1), (1, 0, -1, -1, -1, 0), (1, -1, 0, -1, -1, 0), (1, -1, -1, -1, 0, 0), (1, -1, -1, -1, -1, 1), (1, 0, -1, 0, -1, -1), (0, -1, 0, 0, 1, -1), (1, -1, 0, 0, -1, 1), (-1, -1, 1, -1, 1, 0), (-1, -1, 0, -1, 1, -1), (-1, -1, 0, -1, 1, 0), (-1, 1, 0, -1, 1, 0), (0, -1, 0, -1, 1, 1), (0, 0, -1, -1, 0, 1), (-1, -1, 0, 0, 1, 1), (1, 0, -1, -1, -1, -1), (1, -1, -1, -1, 0, -1), (1, -1, 0, -1, -1, -1), (1, -1, -1, 0, -1, -1), (1, -1, -1, -1, -1, 0), (1, 0, 0, -1, 0, -1), (1, -1, 0, -1, 0, 0), (1, 0, -1, 0, -1, 0), (1, -1, 0, 0, -1, 0), (1, 0, 0, -1, -1, 0), (-1, -1, -1, 0, 0, -1), (0, -1, 0, -1, 1, 0), (-1, -1, 0, 0, 1, 0), (-1, 0, 0, 1, -1, 1), (-1, -1, -1, 1, 0, 1), (0, -1, 1, -1, -1, 1), (-1, 1, -1, 1, -1, -1), (-1, 1, 0, -1, -1, 1), (-1, 1, -1, -1, 0, 1), (-1, 1, -1, 0, -1, 1), (-1, 0, 0, 1, 0, -1), (-1, 0, 0, 1, -1, 0), (0, -1, 1, 0, -1, -1), (-1, -1, -1, 1, 0, 0), (-1, -1, -1, 1, -1, -1), (0, -1, 1, -1, -1, 0), (0, -1, 1, -1, 0, -1), (-1, -1, 1, -1, -1, 1), (1, -1, -1, -1, 1, 0), (-1, 0, -1, 1, -1, 1), (-1, -1, 0, 0, -1, 1), (-1, 1, 1, -1, -1, 0), (-1, -1, 1, 0, 0, 1), (0, -1, 0, -1, -1, 1), (-1, 1, -1, 0, 0, -1), (-1, 1, -1, -1, -1, -1), (-1, -1, 0, -1, -1, 0), (-1, 1, 0, 0, -1, -1), (-1, 1, 0, -1, 0, -1), (-1, 1, 0, -1, -1, 0), (-1, 1, -1, 0, -1, 0), (0, -1, 0, 0, 0, 0), (-1, 1, -1, -1, 0, 0), (-1, 1, 0, 0, 0, 0), (-1, -1, 1, -1, 0, -1), (-1, -1, 1, 0, -1, -1), (-1, -1, 1, -1, -1, 0), (0, -1, -1, 1, -1, -1), (0, -1, -1, 1, 0, 0), (-1, 0, -1, 1, -1, 0), (0, 0, -1, -1, 1, -1), (0, 0, -1, 1, -1, 1), (0, -1, 0, 0, -1, 1), (-1, -1, 1, 0, 0, 0), (-1, 0, -1, 1, 0, -1), (-1, 1, 1, -1, 0, 0), (-1, -1, 0, -1, -1, 1), (-1, -1, 0, -1, 0, 1), (0, 1, -1, -1, -1, -1), (0, 1, -1, 0, 0, -1), (0, 1, -1, -1, 0, 0), (0, -1, 0, 0, 0, 1), (0, 1, 0, -1, 0, -1), (0, 1, -1, 0, -1, 0), (0, 1, 0, -1, -1, 0), (0, 0, -1, 1, -1, 0), (0, 0, 0, 0, 0, -1), (-1, 0, -1, -1, 1, -1), (-1, 0, 1, -1, 1, -1), (0, -1, -1, 0, 1, -1), (0, -1, 0, -1, 0, 1), (-1, 0, -1, 0, 1, 1), (0, -1, -1, -1, 1, 1), (-1, -1, 0, 0, 0, 1), (1, -1, -1, 1, -1, -1), (-1, -1, -1, 1, 1, 0), (1, 1, -1, -1, -1, -1), (-1, -1, -1, 0, 1, -1), (-1, 0, -1, 0, 1, 0), (-1, 0, 0, -1, 1, -1), (0, -1, -1, -1, 1, 0), (-1, 1, -1, -1, 1, 0), (-1, -1, -1, -1, 1, 1), (-1, -1, 1, 0, 1, 0), (-1, -1, -1, -1, 1, 0), (0, -1, 1, 1, -1, -1), (0, 0, 1, -1, -1, -1), (0, 0, 1, -1, 0, 0), (-1, 0, 1, -1, 0, 1), (-1, 0, 1, 0, -1, 1), (-1, -1, 0, 1, -1, 1), (0, 0, -1, -1, -1, 1), (-1, 1, 0, 1, -1, -1), (-1, 0, -1, -1, -1, 0), (-1, -1, 1, 1, -1, 0), (0, 0, -1, 0, 0, 0), (-1, -1, 1, 1, -1, -1), (-1, 0, 1, -1, -1, -1), (-1, 0, 1, 0, -1, 0), (-1, -1, 0, 1, 0, -1), (-1, -1, 0, 1, -1, 0), (-1, 0, 1, -1, 0, 0), (-1, 0, 1, 0, 0, -1), (0, -1, 0, 1, -1, -1), (0, -1, 0, 1, -1, 1), (-1, -1, 0, 1, 0, 1), (-1, 0, -1, -1, -1, 1), (-1, 0, 1, 0, 0, 1), (0, -1, -1, 0, -1, 1), (-1, 0, 1, -1, -1, 1), (0, -1, 1, 1, -1, 0)}, 1: {(0, 0, -1, -1, -1, -1), (0, -1, 0, 1, 0, -1), (0, -1, 0, 1, -1, 0), (-1, -1, 1, 0, 1, -1), (-1, -1, 0, 1, -1, -1), (-1, -1, 0, 1, 0, 0), (-1, 0, 1, 0, -1, -1), (-1, 0, 1, -1, 0, -1), (-1, 0, 1, -1, -1, 0), (-1, 0, 1, 0, 0, 0), (-1, 1, -1, 1, 0, 0), (0, -1, -1, 1, 1, -1), (0, 0, 0, 0, 1, -1), (-1, 0, -1, 0, 0, 1), (-1, 1, 0, 0, 1, -1), (-1, 0, 0, -1, -1, 1), (0, -1, -1, -1, 0, 1), (-1, -1, -1, -1, 0, 0), (-1, 0, 0, 0, 0, 0), (-1, 0, 0, 0, 1, -1), (0, 0, 1, -1, 0, -1), (0, 0, 1, 0, -1, -1), (0, 0, 1, -1, -1, 0), (-1, -1, -1, -1, 1, -1), (-1, 0, 0, -1, 1, 1), (-1, -1, -1, -1, 0, 1), (0, 0, 0, -1, -1, 1), (-1, -1, -1, 0, 1, 1), (-1, 0, 0, 0, 0, 1), (-1, 0, 1, -1, 1, 0), (-1, 0, 1, 1, 0, -1), (0, -1, -1, -1, 1, -1), (-1, 0, 0, -1, 1, 0), (-1, 0, -1, 0, 1, -1), (-1, -1, -1, 0, 1, 0), (-1, 0, -1, -1, 1, 1), (-1, 1, 1, 0, 0, -1), (-1, 1, 1, -1, 0, -1), (0, 0, 0, 0, -1, 0), (-1, -1, 0, 1, 1, 0), (-1, 0, 1, 0, 1, 0), (0, 0, -1, 0, 1, -1), (-1, -1, 0, -1, 0, -1), (0, -1, -1, 0, 1, 0), (-1, 0, -1, -1, 1, 0), (1, 0, -1, 0, -1, -1), (0, 0, -1, 1, -1, -1), (0, 0, -1, 1, 0, 0), (1, 0, -1, -1, 0, -1), (1, 0, 0, -1, -1, -1), (1, -1, -1, 0, 0, -1), (-1, 0, -1, 1, 0, 1), (1, -1, -1, 0, -1, 0), (1, -1, -1, -1, 1, -1), (-1, 1, 1, 0, -1, -1), (0, 1, -1, 0, 0, 0), (0, 1, 0, 0, 0, -1), (0, 0, 0, -1, 0, 0), (-1, 1, -1, 0, 0, 1), (-1, 1, 0, 0, -1, 1), (-1, 1, 0, -1, 0, 1), (0, 0, -1, -1, 1, 0), (-1, 0, -1, 1, 0, 0), (-1, 0, 1, 1, -1, -1), (0, -1, -1, 1, 0, -1), (-1, -1, 1, -1, -1, -1), (-1, -1, 1, 0, 0, -1), (-1, -1, 1, -1, 0, 0), (-1, 1, -1, 1, -1, 0), (-1, -1, 1, 0, -1, 0), (-1, 0, 0, 0, -1, 1), (-1, 0, 0, 1, 0, 1), (-1, -1, -1, -1, -1, 1), (-1, 1, -1, 0, -1, -1), (-1, 1, -1, -1, 0, -1), (-1, 1, -1, -1, -1, 0), (-1, 1, 0, -1, -1, -1), (-1, 1, 0, 0, 0, -1), (-1, 1, -1, 0, 0, 0), (-1, 1, 0, -1, 0, 0), (-1, 1, 0, 0, -1, 0), (-1, 0, 0, 1, 1, -1), (-1, -1, -1, 1, 0, -1), (-1, -1, -1, 1, -1, 0), (0, -1, 1, 0, -1, 0), (0, -1, 1, 0, 0, -1), (0, -1, 1, -1, 0, 0), (-1, 0, 0, 1, 0, 0), (-1, 0, 0, 1, -1, -1), (-1, 1, 0, 1, 0, 0), (0, -1, -1, -1, -1, 1), (-1, 0, 0, -1, 0, 1), (-1, 0, -1, 0, -1, 1), (-1, -1, -1, 0, 0, 1), (-1, 1, -1, 0, 1, -1), (-1, 1, 0, -1, 1, -1), (-1, -1, 1, 1, 0, 0), (-1, 0, -1, 1, 1, -1), (-1, -1, 0, 0, 1, -1), (0, 0, 0, 1, -1, -1), (0, -1, 0, -1, 1, -1), (0, 0, -1, 0, -1, 1), (-1, -1, 0, -1, 1, 1), (0, -1, -1, 0, 0, 1), (0, 1, -1, 0, 1, -1), (-1, 0, -1, -1, 0, 1), (1, -1, 0, -1, -1, 0), (1, -1, 0, 0, -1, -1), (1, -1, -1, -1, 0, 0), (1, -1, -1, -1, -1, -1), (-1, -1, 1, -1, 1, 0), (-1, 1, 1, -1, 1, -1), (-1, 0, -1, 1, 1, 0), (1, 0, -1, -1, -1, 0), (1, -1, 0, -1, 0, -1), (0, 0, -1, 1, 1, -1), (0, -1, 0, 0, 1, -1), (-1, -1, 0, -1, 1, -1), (-1, -1, 0, -1, 1, 0), (-1, 1, 0, -1, 1, 0), (-1, 1, -1, 0, 1, 0), (0, 0, -1, -1, 0, 1), (-1, -1, 0, 0, 1, 1), (-1, 1, 0, 1, 0, -1), (1, -1, -1, -1, -1, 0), (1, -1, -1, 0, -1, -1), (1, -1, -1, -1, 0, -1), (1, -1, 0, -1, -1, -1), (1, 0, -1, 0, 0, -1), (-1, 0, 0, 1, 1, 0), (-1, -1, -1, 0, 0, -1), (0, -1, 0, -1, 1, 0), (-1, 0, -1, 0, -1, -1), (-1, -1, 0, 0, 1, 0), (0, 0, 0, 1, 0, -1), (-1, 0, 0, 1, -1, 1), (-1, -1, -1, 1, 0, 1), (-1, 0, 1, 1, -1, 0), (-1, 1, -1, 0, -1, 1), (-1, 1, -1, -1, 0, 1), (-1, 1, 0, -1, -1, 1), (-1, 0, 0, 1, -1, 0), (-1, 0, 0, 1, 0, -1), (-1, 1, 0, 0, 0, 1), (-1, 1, 1, 0, -1, 0), (-1, -1, -1, 1, -1, -1), (-1, -1, -1, 1, 0, 0), (0, -1, 1, -1, 0, -1), (0, -1, 1, 0, -1, -1), (-1, 1, 1, -1, -1, 0), (-1, -1, 1, 0, 0, 1), (-1, 0, -1, 1, -1, 1), (-1, -1, 0, 0, -1, 1), (0, -1, 0, -1, -1, 1), (-1, 1, 0, -1, -1, 0), (-1, 1, 0, -1, 0, -1), (-1, 1, -1, 0, -1, 0), (-1, 1, -1, -1, -1, -1), (-1, 1, -1, 0, 0, -1), (-1, 1, 0, 0, 0, 0), (-1, 1, -1, -1, 0, 0), (0, -1, 0, 0, 0, 0), (-1, 1, 0, 0, -1, -1), (-1, 0, 1, 0, 1, -1), (-1, -1, 0, 1, 1, -1), (0, -1, -1, 1, -1, -1), (-1, -1, 1, -1, 0, -1), (-1, -1, 1, 0, -1, -1), (-1, 0, -1, 1, 0, -1), (0, 0, -1, -1, 1, -1), (-1, 0, -1, 1, -1, 0), (-1, -1, 1, 0, 0, 0), (-1, 1, 1, -1, 0, 0), (0, -1, 0, 0, -1, 1), (-1, 1, 1, 0, 0, 0), (-1, -1, 0, -1, 0, 1), (0, 1, 0, -1, -1, 0), (0, 1, 0, -1, 0, -1), (0, 1, -1, -1, 0, 0), (0, 1, -1, 0, 0, -1), (0, 1, -1, 0, -1, 0), (0, 1, 0, 0, -1, -1), (-1, 0, 1, 1, 0, 0), (0, -1, 0, 1, 1, -1), (0, 0, -1, 1, 0, -1), (0, 0, 0, 0, 0, -1), (0, 0, -1, 1, -1, 0), (-1, 0, 1, -1, 1, -1), (0, -1, -1, 0, 1, -1), (0, 0, -1, 0, 1, 0), (0, -1, 0, -1, 0, 1), (-1, 0, -1, 0, 1, 1), (0, -1, -1, -1, 1, 1), (-1, -1, 0, 0, 0, 1), (-1, -1, -1, 1, 1, 0), (1, 1, -1, -1, -1, -1), (-1, -1, -1, 0, 1, -1), (-1, 0, -1, 0, 1, 0), (0, -1, -1, -1, 1, 0), (-1, 0, 0, -1, 1, -1), (-1, 1, 0, 0, 1, 0), (-1, 1, -1, -1, 1, 0), (-1, 0, 0, 0, 1, 1), (-1, 1, -1, 1, 0, -1), (-1, -1, 1, 0, 1, 0), (-1, 0, 0, -1, -1, -1), (-1, -1, -1, -1, 1, 0), (0, 0, 0, -1, 1, -1), (0, 0, 1, -1, -1, -1), (-1, 0, 0, 0, 1, 0), (-1, 0, 1, -1, 0, 1), (-1, 0, 1, 0, -1, 1), (0, 0, -1, -1, -1, 1), (-1, 1, 0, 1, -1, -1), (-1, 0, -1, -1, -1, 0), (-1, -1, 1, 1, -1, 0), (0, 0, -1, 0, 0, 0), (0, -1, -1, 0, -1, -1), (-1, 0, 1, -1, -1, -1), (-1, 0, 1, 0, 0, -1), (-1, -1, 0, 1, -1, 0), (-1, -1, 0, 1, 0, -1), (-1, 0, 1, -1, 0, 0), (-1, 0, 1, 0, -1, 0), (0, -1, 0, 1, -1, -1), (-1, 1, 0, 1, -1, 0), (-1, -1, 0, 1, 0, 1), (-1, 0, -1, -1, -1, 1), (-1, 0, 1, -1, -1, 1), (0, -1, -1, 0, -1, 1), (0, -1, -1, 1, 0, 0)}, 2: {(0, 0, -1, 1, 0, -1), (0, 0, 0, 0, 0, -1), (0, 0, -1, -1, 0, 1), (0, 1, -1, 0, 0, 0), (0, -1, 0, 1, 0, -1), (0, 0, 0, -1, 0, 0), (1, -1, 0, -1, -1, -1), (1, 0, -1, 0, -1, 0), (1, 0, 0, -1, -1, 0), (1, 0, -1, -1, 0, 0), (0, -1, 0, -1, 0, 1), (1, 0, -1, 0, 0, -1), (1, 0, 0, -1, 0, -1), (0, 0, -1, -1, 1, 0), (-1, 0, -1, 0, 0, 1), (0, -1, 0, -1, 1, 0), (-1, 1, -1, -1, 0, -1), (-1, 0, 0, 0, 0, 0), (0, -1, -1, -1, -1, 0), (-1, 0, 0, 0, 1, -1), (0, 0, 1, -1, -1, 0), (0, 0, 1, 0, -1, -1), (0, -1, 1, -1, 0, 0), (0, 1, -1, -1, 1, -1), (-1, 0, 0, 1, -1, 0), (-1, 0, 0, -1, -1, -1), (0, -1, -1, -1, 0, -1), (0, 1, -1, -1, 1, 0), (-1, -1, 0, -1, -1, 0), (0, 1, -1, 1, 0, -1), (0, 1, -1, -1, 0, 1), (0, -1, 0, 0, 0, 0), (-1, 0, -1, -1, -1, 0), (0, 0, -1, 0, -1, 1), (0, 0, -1, 0, 0, 0), (1, 1, -1, 0, -1, 0), (1, 0, -1, -1, 1, 0), (0, -1, -1, 1, 0, 0), (0, 0, 0, 0, -1, 0), (0, 0, -1, 1, -1, 1), (0, 0, -1, 0, 1, -1), (0, 1, -1, 0, -1, 0), (0, 1, 0, 0, -1, -1), (0, -1, -1, 0, 1, 0), (0, 1, -1, -1, 0, 0), (-1, 0, -1, -1, -1, 1), (0, 1, -1, 0, 0, -1), (0, 1, 0, -1, -1, 0), (-1, 0, -1, -1, 0, -1), (0, 0, -1, -1, 1, 1), (0, 0, -1, 0, 0, 1), (-1, -1, -1, 0, -1, 0)}}


		init_evil_combs = {0: {(0, -1, -1, -1, 0, 0), (-1, 0, 0, -1, -1, 0), (0, -1, 0, 1, 0, -1), (0, -1, 0, 1, -1, 0), (-1, -1, 0, 1, 0, 0), (-1, 0, 1, 0, -1, -1), (-1, 0, -1, 0, 0, 1), (-1, 0, 0, -1, -1, 1), (0, 0, 0, -1, -1, 0), (0, 0, 1, 0, 0, 0), (0, 0, 1, 0, -1, -1), (0, 0, 1, -1, 0, -1), (0, 0, 1, -1, -1, 0), (0, 0, 0, -1, -1, 1), (-1, -1, 0, 0, 0, -1), (-1, 0, 0, -1, 1, 0), (0, -1, 0, -1, 0, -1), (0, -1, -1, 0, 1, 1), (0, 0, 0, 0, 0, 1), (0, -1, 0, 0, 0, -1), (0, -1, -1, 0, 1, 0), (-1, 0, -1, -1, 1, 0), (0, -1, 0, 0, -1, -1), (-1, 0, 0, 0, -1, 0), (0, 1, -1, -1, -1, 0), (0, 1, 0, -1, -1, -1), (0, 0, -1, -1, 1, 0), (-1, -1, 1, -1, 0, 0), (0, -1, -1, 1, 0, -1), (0, -1, -1, 1, -1, 0), (-1, -1, 1, 0, -1, 0), (-1, 0, 0, 0, -1, 1), (-1, 1, 0, 0, -1, 0), (-1, 1, 0, -1, 0, 0), (-1, 0, 0, -1, 0, 0), (-1, 0, -1, 0, -1, 0), (-1, -1, -1, 0, 0, 0), (0, -1, 1, 0, -1, 0), (0, -1, 1, 0, 0, -1), (0, -1, 1, -1, 0, 0), (-1, 0, 0, -1, 0, 1), (-1, 0, -1, 0, -1, 1), (0, 0, -1, 0, -1, 0), (0, -1, -1, 0, 0, 0), (-1, 0, -1, -1, 0, 0), (-1, -1, 0, 0, 1, -1), (0, 0, 0, 1, 0, 0), (0, 0, -1, -1, 0, -1), (0, 0, 0, 1, -1, -1), (0, -1, 0, -1, 1, -1), (0, 0, -1, 0, -1, 1), (0, -1, -1, 0, 0, 1), (0, 0, -1, -1, 0, 0), (1, -1, -1, 0, -1, 0), (1, 0, 0, -1, -1, -1), (1, -1, -1, 0, 0, -1), (1, -1, 0, -1, 0, -1), (1, -1, 0, -1, -1, 0), (1, -1, 0, 0, -1, -1), (1, -1, 0, 0, -1, 1), (0, -1, 0, 0, 1, -1), (0, -1, -1, 0, 0, -1), (0, 0, -1, 0, -1, -1), (1, 0, 0, 0, 0, 0), (1, 0, 0, -1, 0, -1), (1, -1, 0, -1, 0, 0), (1, 0, -1, 0, -1, 0), (1, -1, 0, 0, -1, 0), (1, 0, 0, -1, -1, 0), (0, -1, 0, -1, 1, 0), (-1, 0, 0, -1, 0, -1), (-1, -1, 0, 0, 1, 0), (-1, -1, 0, 0, -1, 0), (0, -1, 0, -1, -1, 0), (0, 0, 0, -1, 0, -1), (-1, 0, 0, 1, -1, 0), (-1, 0, 0, 0, -1, -1), (0, -1, 1, 0, -1, -1), (-1, -1, -1, 1, 0, 0), (0, -1, 1, -1, -1, 0), (0, -1, 1, -1, 0, -1), (-1, -1, 0, 0, -1, 1), (0, -1, 0, -1, -1, 1), (0, -1, 0, 0, -1, 0), (-1, 1, -1, 0, 0, -1), (-1, -1, 0, -1, 0, 0), (0, 0, 0, 0, -1, -1), (0, -1, -1, 1, 0, 0), (-1, -1, 1, 0, 0, 0), (0, 0, -1, 1, -1, 1), (0, -1, 0, 0, -1, 1), (-1, -1, 0, -1, 0, 1), (0, 1, 0, 0, 0, 0), (0, 1, -1, 0, 0, -1), (0, 1, 0, -1, -1, 0), (0, -1, 0, -1, 0, 0), (0, 1, -1, 0, -1, 0), (0, 1, 0, -1, 0, -1), (-1, -1, 0, 0, 0, 0), (0, 0, -1, 1, -1, 0), (0, -1, -1, 0, 1, -1), (0, -1, 0, -1, 0, 1), (-1, -1, 0, 0, 0, 1), (-1, 0, 0, 0, 0, -1), (0, 0, 0, -1, -1, -1), (0, 0, -1, -1, -1, 0), (-1, 0, -1, 0, 0, -1), (0, 0, 1, -1, -1, -1), (0, 0, -1, -1, -1, 1), (0, -1, -1, 0, -1, 0), (0, 0, -1, 0, 0, -1), (-1, 0, 1, 0, -1, 0), (-1, 0, 1, -1, 0, 0), (-1, -1, 0, 1, -1, 0), (0, 0, 0, 0, 1, 0), (-1, -1, 0, 1, 0, -1), (0, -1, 0, 1, -1, -1), (0, -1, 0, 1, -1, 1), (-1, 0, 1, 0, 0, 1), (0, -1, -1, 0, -1, 1), (0, -1, 1, 1, -1, 0), (-1, 0, -1, 0, 0, 0)}, 1: {(-1, 0, 0, -1, -1, 0), (0, -1, -1, -1, 0, 0), (0, -1, 0, 1, 0, -1), (-1, -1, 0, 1, 0, 0), (-1, 0, 1, 0, -1, -1), (-1, 0, 1, -1, 0, -1), (-1, 0, 1, -1, -1, 0), (-1, 0, 1, 0, 0, 0), (-1, 0, -1, 0, 0, 1), (-1, 1, 0, 0, 1, -1), (-1, 0, 0, -1, -1, 1), (0, -1, -1, -1, 0, 1), (0, 0, 0, -1, -1, 0), (-1, 0, 0, 0, 1, -1), (0, 0, 1, 0, 0, 0), (0, 0, 1, -1, 0, -1), (-1, 0, 0, -1, 1, 1), (-1, 0, 0, 0, 0, 1), (-1, 0, 1, -1, 1, 0), (-1, 0, 1, 1, 0, -1), (-1, -1, 0, 0, 0, -1), (-1, 0, 0, -1, 1, 0), (-1, 0, -1, 0, 1, -1), (0, -1, 0, -1, 0, -1), (-1, -1, -1, 0, 1, 0), (-1, 1, 1, 0, 0, -1), (0, 0, 0, 0, 0, 1), (-1, -1, 0, 1, 1, 0), (-1, 0, 1, 0, 1, 0), (0, -1, 0, 0, 0, -1), (0, 0, -1, 0, 1, -1), (0, -1, -1, 0, 1, 0), (-1, 0, -1, -1, 1, 0), (0, -1, 0, 0, -1, -1), (0, 0, -1, 1, -1, -1), (-1, 0, -1, 1, 0, 1), (-1, 0, 0, 0, -1, 0), (-1, 1, -1, 0, 0, 1), (-1, 1, 0, -1, 0, 1), (0, 0, -1, -1, 1, 0), (-1, 0, -1, 1, 0, 0), (0, -1, -1, 1, 0, -1), (-1, -1, 1, 0, 0, -1), (-1, -1, 1, -1, 0, 0), (-1, 0, 0, 0, -1, 1), (-1, 0, 0, 1, 0, 1), (-1, 1, 0, 0, 0, -1), (-1, 1, 0, 0, -1, 0), (-1, 1, -1, 0, 0, 0), (-1, 0, 0, -1, 0, 0), (-1, 1, 0, -1, 0, 0), (-1, 0, -1, 0, -1, 0), (-1, -1, -1, 0, 0, 0), (-1, 0, 0, 1, 1, -1), (-1, 0, 0, 1, 0, 0), (-1, 0, 0, 1, -1, -1), (-1, 1, 0, 1, 0, 0), (-1, 0, 0, -1, 0, 1), (-1, 0, -1, 0, -1, 1), (-1, -1, -1, 0, 0, 1), (0, 0, -1, 0, -1, 0), (0, -1, -1, 0, 0, 0), (-1, 0, -1, -1, 0, 0), (0, 0, 0, 1, 0, 0), (0, 0, -1, -1, 0, -1), (-1, -1, 0, 0, 1, -1), (0, -1, 0, -1, 1, -1), (0, 0, -1, 0, -1, 1), (0, -1, -1, 0, 0, 1), (-1, 0, -1, -1, 0, 1), (0, 0, -1, -1, 0, 0), (1, -1, -1, -1, 0, 0), (1, -1, 0, -1, -1, 0), (1, -1, 0, 0, -1, -1), (-1, 0, -1, 1, 1, 0), (0, -1, -1, 0, 0, -1), (-1, -1, 0, -1, 1, 0), (-1, 1, 0, -1, 1, 0), (-1, 1, -1, 0, 1, 0), (0, 0, -1, 0, -1, -1), (-1, -1, 0, 0, 1, 1), (-1, 1, 0, 1, 0, -1), (1, 0, 0, 0, 0, 0), (1, 0, -1, 0, 0, -1), (-1, 0, 0, 1, 1, 0), (-1, 0, 0, -1, 0, -1), (-1, -1, 0, 0, 1, 0), (-1, -1, 0, 0, -1, 0), (0, -1, 0, -1, -1, 0), (-1, 1, 0, 0, 0, 1), (0, 0, 0, -1, 0, -1), (-1, 0, 0, 1, 0, -1), (-1, 0, 0, 1, -1, 0), (-1, 0, 0, 0, -1, -1), (-1, -1, -1, 1, 0, 0), (0, -1, 1, -1, 0, -1), (-1, -1, 0, 0, -1, 1), (0, -1, 0, -1, -1, 1), (0, -1, 0, 0, -1, 0), (-1, 1, -1, -1, 0, 0), (-1, 1, -1, 0, -1, 0), (-1, 1, 0, -1, -1, 0), (-1, 1, 0, -1, 0, -1), (-1, -1, 0, -1, 0, 0), (-1, 1, 0, 0, 0, 0), (-1, 1, -1, 0, 0, -1), (-1, 1, 0, 0, -1, -1), (-1, 0, 1, 0, 1, -1), (0, 0, 0, 0, -1, -1), (-1, -1, 1, 0, 0, 0), (-1, 0, -1, 1, 0, -1), (-1, 0, -1, 1, -1, 0), (0, 0, -1, -1, 1, -1), (-1, 1, 1, 0, 0, 0), (-1, -1, 0, -1, 0, 1), (0, 1, 0, 0, 0, 0), (0, 1, -1, 0, 0, -1), (0, -1, 0, -1, 0, 0), (-1, -1, 0, 0, 0, 0), (-1, 0, 1, 1, 0, 0), (0, 0, -1, 1, 0, -1), (0, -1, -1, 0, 1, -1), (0, -1, 0, -1, 0, 1), (-1, 0, -1, 0, 1, 1), (-1, -1, 0, 0, 0, 1), (-1, 0, 0, 0, 0, -1), (0, 0, 0, -1, -1, -1), (-1, 0, -1, 0, 1, 0), (-1, 0, 0, -1, 1, -1), (0, -1, -1, -1, 1, 0), (-1, 1, 0, 0, 1, 0), (-1, 0, 0, 0, 1, 1), (0, 0, -1, -1, -1, 0), (-1, 0, -1, 0, 0, -1), (0, 0, 1, -1, -1, -1), (-1, 0, 0, 0, 1, 0), (0, 0, -1, -1, -1, 1), (0, -1, -1, 0, -1, 0), (0, 0, -1, 0, 0, -1), (-1, 0, 1, 0, 0, -1), (-1, 0, 1, -1, 0, 0), (0, 0, 0, 0, 1, 0), (-1, -1, 0, 1, -1, 0), (-1, -1, 0, 1, 0, -1), (-1, 0, 1, 0, -1, 0), (0, -1, 0, 1, -1, -1), (-1, -1, 0, 1, 0, 1), (0, -1, -1, 0, -1, 1), (-1, 0, -1, 0, 0, 0)}, 2: {(-1, 0, 0, -1, -1, 0), (0, -1, -1, -1, 0, 0), (0, -1, 0, 1, 0, -1), (-1, 0, 1, 0, -1, -1), (-1, 0, 1, -1, -1, 0), (-1, 0, -1, 0, 0, 1), (0, -1, -1, -1, 0, 1), (0, 0, 0, -1, -1, 0), (-1, 0, 0, 0, 1, -1), (0, 0, 1, 0, 0, 0), (0, 0, 1, -1, -1, 0), (0, 0, 1, 0, -1, -1), (0, 0, 0, -1, -1, 1), (-1, -1, 0, 0, 0, -1), (-1, 0, -1, 0, 1, -1), (0, -1, 0, -1, 0, -1), (-1, -1, -1, 0, 1, 0), (0, 0, 0, 0, 0, 1), (0, -1, 0, 0, 0, -1), (0, 0, -1, 0, 1, -1), (0, -1, -1, 0, 1, 0), (0, -1, 0, 0, -1, -1), (0, 0, -1, 1, -1, -1), (0, 0, -1, -1, 1, 1), (-1, 0, 0, 0, -1, 0), (0, 1, -1, -1, -1, 0), (0, 1, -1, 0, -1, -1), (0, 1, 0, -1, -1, -1), (0, 1, -1, -1, 0, -1), (0, 1, -1, 0, 0, 0), (0, 0, -1, -1, 1, 0), (0, -1, -1, 1, -1, 0), (0, -1, -1, 1, 0, -1), (-1, 1, -1, 0, 0, 0), (-1, 0, 0, -1, 0, 0), (-1, 0, -1, 0, -1, 0), (-1, -1, -1, 0, 0, 0), (0, -1, 1, -1, 0, 0), (-1, 0, 0, 1, -1, -1), (-1, 0, -1, 0, -1, 1), (-1, -1, -1, 0, 0, 1), (0, 0, -1, 0, -1, 0), (0, -1, -1, 0, 0, 0), (-1, 0, -1, -1, 0, 0), (0, 0, 0, 1, 0, 0), (0, 0, -1, -1, 0, -1), (0, 0, 0, 1, -1, -1), (0, -1, 0, -1, 1, -1), (0, 0, -1, 0, -1, 1), (0, -1, -1, 0, 0, 1), (-1, 0, -1, -1, 0, 1), (0, 0, -1, -1, 0, 0), (1, -1, 0, -1, -1, 0), (1, 0, -1, -1, -1, 0), (1, 0, -1, -1, 0, -1), (1, 0, 0, -1, -1, -1), (1, -1, -1, 0, -1, 0), (1, 0, -1, 0, -1, -1), (1, -1, -1, -1, 0, 0), (0, -1, -1, 0, 0, -1), (-1, -1, 0, -1, 1, 0), (0, 0, -1, 0, -1, -1), (0, 0, -1, -1, 0, 1), (1, 0, 0, 0, 0, 0), (1, 0, -1, 0, -1, 0), (1, 0, 0, -1, -1, 0), (1, 0, -1, -1, 0, 0), (1, 0, -1, 0, 0, -1), (1, 0, 0, -1, 0, -1), (0, -1, 0, -1, 1, 0), (-1, 0, 0, -1, 0, -1), (-1, -1, 0, 0, -1, 0), (0, -1, 0, -1, -1, 0), (0, 0, 0, -1, 0, -1), (-1, 0, 0, 1, -1, 0), (-1, 0, 0, 0, -1, -1), (0, -1, 1, -1, -1, 0), (0, -1, 1, -1, 0, -1), (-1, -1, 0, 0, -1, 1), (0, -1, 0, -1, -1, 1), (0, -1, 0, 0, -1, 0), (-1, 1, 0, -1, 0, -1), (-1, 1, -1, 0, -1, 0), (-1, 1, 0, 0, -1, -1), (-1, -1, 0, -1, 0, 0), (-1, 1, -1, 0, 0, -1), (-1, 1, 0, -1, -1, 0), (0, 1, -1, -1, 0, 1), (0, 0, 0, 0, -1, -1), (0, -1, -1, 1, 0, 0), (-1, 0, -1, 1, 0, -1), (1, 0, -1, -1, 1, 0), (0, 0, -1, -1, 1, -1), (0, 0, -1, 1, -1, 1), (0, -1, 0, 0, -1, 1), (-1, -1, 0, -1, 0, 1), (0, 1, -1, -1, 0, 0), (0, 1, 0, 0, 0, 0), (0, 1, -1, 0, -1, 0), (0, -1, 0, -1, 0, 0), (0, 1, 0, 0, -1, -1), (0, 1, -1, 0, 0, -1), (0, 1, 0, -1, -1, 0), (-1, -1, 0, 0, 0, 0), (0, 1, 0, -1, 0, -1), (0, 0, -1, 1, 0, -1), (0, 0, -1, 1, -1, 0), (0, -1, -1, 0, 1, -1), (0, -1, 0, -1, 0, 1), (-1, 0, 0, 0, 0, -1), (0, 0, 0, -1, -1, -1), (0, -1, -1, -1, 1, 0), (0, 0, -1, -1, -1, 0), (-1, 0, -1, 0, 0, -1), (0, 1, -1, -1, 1, 0), (0, 0, 1, -1, -1, -1), (0, 1, -1, 1, 0, -1), (0, 0, -1, -1, -1, 1), (0, -1, -1, 0, -1, 0), (0, 0, -1, 0, 0, -1), (0, 0, 0, 0, 1, 0), (-1, -1, 0, 1, -1, 0), (0, -1, -1, 0, -1, 1), (0, 0, -1, 0, 0, 1), (-1, 0, -1, 0, 0, 0)}}


		all_zeros = [0 for j in range(items)]




		running_ind = 0
		failed_run = False

		stage = "MANDATORY"


		relevant_combs = []

		firstTime = 0

		raw_equs = [((0, (1, -1, 0, 0, 0, -1)), 7), ((0, (1, -1, -1, 0, 0, 0)), 7), ((0, (1, 0, 0, 0, -1, 0)), 7), ((0, (1, 0, 0, -1, 0, 0)), 7), ((2, (0, 0, -1, 1, 1, -1)), 7), ((2, (0, -1, 0, 1, 1, -1)), 7), ((2, (0, -1, -1, 1, 1, 0)), 7), ((0, (0, 1, 1, -1, 0, -1)), 9), ((0, (0, 1, 1, -1, -1, 0)), 9), ((2, (1, 0, 0, 1, -1, 0)), 13), ((2, (1, -1, 0, 1, 0, 0)), 13), ((2, (1, 0, 0, 1, 0, -1)), 13), ((2, (1, 0, -1, 1, 0, 0)), 13), ((2, (-1, 1, 0, 1, 0, 0)), 14), ((2, (0, 0, 1, -1, -1, 1)), 16), ((2, (0, -1, 1, 0, -1, 1)), 16), ((0, (0, -1, 1, 0, 1, -1)), 18), ((0, (0, -1, 1, -1, 1, 0)), 18), ((0, (-1, 0, 0, 0, 1, 1)), 21), ((0, (0, -1, 0, 0, 1, 1)), 21), ((0, (-1, 1, 1, 0, 0, 0)), 22), ((0, (0, -1, 0, 1, 1, -1)), 30), ((0, (-1, 0, 0, 1, 1, -1)), 30), ((0, (-1, -1, 0, 1, 1, 0)), 30), ((2, (0, 0, 1, 0, -1, 0)), 30), ((2, (0, 0, 1, -1, 0, 0)), 30), ((2, (0, -1, 1, 0, 0, -1)), 30), ((2, (-1, 0, 1, 0, 0, -1)), 30), ((2, (-1, -1, 1, 0, 0, 0)), 30), ((2, (0, 1, 0, -1, 1, 0)), 33), ((2, (-1, 1, 0, 0, 1, 0)), 33), ((2, (0, 1, -1, 0, 1, 0)), 33), ((2, (0, 0, 0, 1, -1, 1)), 35), ((2, (0, 0, -1, 1, 0, 1)), 35), ((0, (-1, 1, 0, 0, 0, 1)), 37), ((2, (-1, 0, 0, 0, 1, 1)), 38), ((2, (0, 1, 1, 0, -1, -1)), 44), ((2, (0, 1, 1, -1, 0, -1)), 44), ((2, (0, 1, 1, -1, -1, 0)), 44), ((2, (0, 1, 0, 0, -1, 1)), 47), ((2, (0, 1, -1, 0, 0, 1)), 47), ((2, (-1, 1, 0, 0, 0, 1)), 47), ((2, (0, -1, 1, 0, 1, -1)), 49), ((2, (0, -1, 1, -1, 1, 0)), 49), ((2, (-1, 1, 1, 0, 0, 0)), 50), ((2, (1, -1, 0, 0, 1, 0)), 53), ((2, (1, 0, 0, 0, 1, -1)), 53), ((2, (1, 0, -1, 0, 1, 0)), 53), ((2, (1, 1, 0, 0, -1, 0)), 57), ((2, (1, 1, 0, -1, 0, 0)), 57), ((2, (1, 1, 0, 0, 0, -1)), 57), ((2, (1, 1, -1, 0, 0, 0)), 57)]
		equs = [i[0] for i in raw_equs]
		min_arg = []
		min_fvotes = 2000

		init_true_combs_base[0].append([0, -1, 1, -1, 1, 0])
		init_true_combs_base[0].append([0, 1, 1, -1, -1, 0])
		for equ_ind in [i for i in range(17)] + [i for i in range(18,len(equs))]:
			print(equ)
			equ = equs[equ_ind]
			true_combs_base = {}
			good_combs = {}
			evil_combs = {}

			for player in range(3):
				true_combs_base[player] = init_true_combs_base[player][:]
				good_combs[player] = copy(init_good_combs[player])
				evil_combs[player] = copy(init_evil_combs[player])


			true_combs_base[equ[0]].append(list(equ[1]))


			votes = {}
			critical_level = {}

			begin_length = len(allocs)

			valuations = {0: [], 1: [], 2:[]}

			for player in range(players):
				valuations[player] = generate_valuation(true_combs_base[player])
				if valuations[player] is None:
					import pdb
					pdb.set_trace()

			bad_combs = {0: set([]), 1: set([]), 2:set([])}
			
			#random.shuffle(allocs)

			sampled_allocs = allocs[:500]

			print("SAMPLED ALLOCS BEFORE FILTER {}".format(len(sampled_allocs)))
			fs_allocs = filter_pareto_dominated(sampled_allocs, true_combs_base, all_combs, good_combs, bad_combs)
			print("SAMPLED ALLOCS AFTER PARETO FILTER {}".format(len(fs_allocs)))
			fe_allocs = filter_efx_envious(fs_allocs, true_combs_base, all_combs, good_combs, bad_combs)
			print("SAMPLED ALLOCS AFTER EFX FILTER {}".format(len(fe_allocs)))



			valuations = {0: [], 1: [], 2:[]}

			for player in range(players):
				valuations[player] = generate_valuation(true_combs_base[player])
				if valuations[player] is None:
					import pdb
					pdb.set_trace()

			start = time.time()

			all_poss_j = []
			for alloc in fe_allocs:
				for pair in all_pairs:
					side1_items = []
					side2_items = []
					equ = copy(all_zeros)
					for i in range(len(alloc)):
						if alloc[i] == pair[0]:
							side1_items.append(i)
							equ[i] = 1
						elif alloc[i] == pair[1]:
							side2_items.append(i)
							equ[i] = -1

					for j in side2_items:
						curr_equ = copy(equ)
						curr_equ[j] = 0
						if sum(curr_equ) == 0 and len(set(curr_equ)) == 1:
							continue
						anti_key = tuple(reverse_comb(curr_equ))
						if anti_key in evil_combs[pair[0]]:
							continue
						elif is_comb_in_base(anti_key, true_combs_base[pair[0]]):
							continue
						elif tuple([pair[0], tuple(curr_equ)]) in votes:
							votes[tuple([pair[0],tuple(curr_equ)])] += 1
						else:
							votes[tuple([pair[0],tuple(curr_equ)])] = 1
						all_poss_j.append(tuple([pair[0], tuple(curr_equ)]))
				for player, eq in all_poss_j:
					if tuple([player, eq]) not in critical_level:
						critical_level[tuple([player, eq])] = len(all_poss_j)
					else:
						critical_level[tuple([player, eq])] = min(critical_level[tuple([player, eq])], len(all_poss_j))
				#random.shuffle(all_poss_j)
			sorted_critical = sorted(critical_level.items(), key=lambda item: item[1]) 
			

			curr_fvotes = len(sorted_critical)
			curr_allocs = len(fe_allocs)
			if curr_allocs == 0:
				continue
			print("CURR F_VOTES {} and ALLOCS {} with ratio {}".format(curr_fvotes, curr_allocs, curr_fvotes / curr_allocs))

			if curr_fvotes / curr_allocs < min_fvotes:
				min_fvotes = curr_fvotes / curr_allocs
				min_arg = equ
		print("MIN FVOTES {} with MIN EQ {}".format(min_fvotes, min_arg))
